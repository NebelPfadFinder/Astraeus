version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: chatbot_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: chatbot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: chatbot_app
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=docker
    env_file:
      - .env
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: chatbot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

  # Database Initialization Service
  db_init:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: chatbot_db_init
    volumes:
      - ./data:/app/data
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    env_file:
      - .env
    command: python scripts/setup_database.py
    depends_on:
      qdrant:
        condition: service_healthy
    profiles:
      - init

  # Data Loader Service
  data_loader:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: chatbot_data_loader
    volumes:
      - ./data:/app/data
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    env_file:
      - .env
    command: python data_loader.py --path /app/data/documents/
    depends_on:
      qdrant:
        condition: service_healthy
    profiles:
      - init

volumes:
  qdrant_storage:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: chatbot_network
    driver: bridge
